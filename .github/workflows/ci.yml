# This workflow validates PRs and pushes with code checks, unit tests and end-to-end tests.
name: Continuous Integration

on:
  - push
  - pull_request

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    env:
      COVERAGE_PATH: cover.out
      PREV_COVERAGE_PATH: min_coverage/cover.out
      TF_EXAMPLES_PATH: examples
      # This is not currently exposed.
      # See: https://github.com/orgs/community/discussions/10052
      # See: https://github.com/actions/runner/issues/853
      WORKFLOW_FILE_NAME: ci.yml
    strategy:
      fail-fast: false
      matrix:
        go:
          - 1.22.0
        terraform:
          - 1.6.6
    steps:
        # Setup
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ matrix.terraform }}
          terraform_wrapper: false

        # Tests
      - name: Check terraform examples for proper formatting
        run: terraform fmt -recursive -check ${TF_EXAMPLES_PATH}
      - run: go mod download
      - name: Run Unit Tests
        run: go test ./... -v -run="^TestUnit" -cover -coverprofile=${COVERAGE_PATH}
        timeout-minutes: 10

        # Find and Pull the archived cover report of the last run
      - name: Retrieve Previous Succesful Run ID
        id: prev-run-id
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: process.env.WORKFLOW_FILE_NAME,
              status: "success",
              per_page: 1
            })
            if (runs.data.total_count === 0) {
              core.setFailed("Previous workflow run not found.");
              return;
            }
            return runs.data.workflow_runs[0].id;
          result-encoding: string
      - name: Download Coverage
        id: download-coverage
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-${{ matrix.go }}
          path: min_coverage
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.prev-run-id.outputs.result }}

        # Verify that coverage did not decrease from last run.
      - name: Check for minimum coverage
        if: steps.download-coverage.outcome == 'success'
        run: |
          COVERAGE=$(go tool cover -func=${COVERAGE_PATH} | awk '/^total:/{print $3}')

          if [ -e ${PREV_COVERAGE_PATH} ] ; then
            MIN_COVERAGE=$(go tool cover -func=${PREV_COVERAGE_PATH} | awk '/^total:/{print $3}')
          else
            echo "No previous coverage file found at ${PREV_COVERAGE_PATH}."
            exit 1
          fi

          printf '%s\n' "Previous coverage: ${MIN_COVERAGE}" "Current coverage: ${COVERAGE}"
          if [ $(echo "${COVERAGE%\%}<${MIN_COVERAGE%\%}"|bc) -gt 0 ]; then
            echo "ERROR: Coverage fell below previous run."
            exit 1
          fi

        # Archive the cover report of the current test run.
      - name: Archive coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ matrix.go }}
          path: ${{env.COVERAGE_PATH}}
