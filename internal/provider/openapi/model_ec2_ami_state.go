/*
ParallelCluster

ParallelCluster API

API version: 3.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Ec2AmiState the model 'Ec2AmiState'
type Ec2AmiState string

// List of Ec2AmiState
const (
	EC2AMISTATE_PENDING Ec2AmiState = "PENDING"
	EC2AMISTATE_AVAILABLE Ec2AmiState = "AVAILABLE"
	EC2AMISTATE_INVALID Ec2AmiState = "INVALID"
	EC2AMISTATE_DEREGISTERED Ec2AmiState = "DEREGISTERED"
	EC2AMISTATE_TRANSIENT Ec2AmiState = "TRANSIENT"
	EC2AMISTATE_FAILED Ec2AmiState = "FAILED"
	EC2AMISTATE_ERROR Ec2AmiState = "ERROR"
)

// All allowed values of Ec2AmiState enum
var AllowedEc2AmiStateEnumValues = []Ec2AmiState{
	"PENDING",
	"AVAILABLE",
	"INVALID",
	"DEREGISTERED",
	"TRANSIENT",
	"FAILED",
	"ERROR",
}

func (v *Ec2AmiState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Ec2AmiState(value)
	for _, existing := range AllowedEc2AmiStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Ec2AmiState", value)
}

// NewEc2AmiStateFromValue returns a pointer to a valid Ec2AmiState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEc2AmiStateFromValue(v string) (*Ec2AmiState, error) {
	ev := Ec2AmiState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Ec2AmiState: valid values are %v", v, AllowedEc2AmiStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Ec2AmiState) IsValid() bool {
	for _, existing := range AllowedEc2AmiStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Ec2AmiState value
func (v Ec2AmiState) Ptr() *Ec2AmiState {
	return &v
}

type NullableEc2AmiState struct {
	value *Ec2AmiState
	isSet bool
}

func (v NullableEc2AmiState) Get() *Ec2AmiState {
	return v.value
}

func (v *NullableEc2AmiState) Set(val *Ec2AmiState) {
	v.value = val
	v.isSet = true
}

func (v NullableEc2AmiState) IsSet() bool {
	return v.isSet
}

func (v *NullableEc2AmiState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEc2AmiState(val *Ec2AmiState) *NullableEc2AmiState {
	return &NullableEc2AmiState{value: val, isSet: true}
}

func (v NullableEc2AmiState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEc2AmiState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

