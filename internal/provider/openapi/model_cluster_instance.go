/*
ParallelCluster

ParallelCluster API

API version: 3.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ClusterInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterInstance{}

// ClusterInstance struct for ClusterInstance
type ClusterInstance struct {
	InstanceId string `json:"instanceId"`
	InstanceType string `json:"instanceType"`
	LaunchTime time.Time `json:"launchTime"`
	PrivateIpAddress string `json:"privateIpAddress"`
	PublicIpAddress *string `json:"publicIpAddress,omitempty"`
	State InstanceState `json:"state"`
	NodeType NodeType `json:"nodeType"`
	QueueName *string `json:"queueName,omitempty"`
	PoolName *string `json:"poolName,omitempty"`
}

type _ClusterInstance ClusterInstance

// NewClusterInstance instantiates a new ClusterInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterInstance(instanceId string, instanceType string, launchTime time.Time, privateIpAddress string, state InstanceState, nodeType NodeType) *ClusterInstance {
	this := ClusterInstance{}
	this.InstanceId = instanceId
	this.InstanceType = instanceType
	this.LaunchTime = launchTime
	this.PrivateIpAddress = privateIpAddress
	this.State = state
	this.NodeType = nodeType
	return &this
}

// NewClusterInstanceWithDefaults instantiates a new ClusterInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterInstanceWithDefaults() *ClusterInstance {
	this := ClusterInstance{}
	return &this
}

// GetInstanceId returns the InstanceId field value
func (o *ClusterInstance) GetInstanceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value
// and a boolean to check if the value has been set.
func (o *ClusterInstance) GetInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceId, true
}

// SetInstanceId sets field value
func (o *ClusterInstance) SetInstanceId(v string) {
	o.InstanceId = v
}

// GetInstanceType returns the InstanceType field value
func (o *ClusterInstance) GetInstanceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value
// and a boolean to check if the value has been set.
func (o *ClusterInstance) GetInstanceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstanceType, true
}

// SetInstanceType sets field value
func (o *ClusterInstance) SetInstanceType(v string) {
	o.InstanceType = v
}

// GetLaunchTime returns the LaunchTime field value
func (o *ClusterInstance) GetLaunchTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LaunchTime
}

// GetLaunchTimeOk returns a tuple with the LaunchTime field value
// and a boolean to check if the value has been set.
func (o *ClusterInstance) GetLaunchTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LaunchTime, true
}

// SetLaunchTime sets field value
func (o *ClusterInstance) SetLaunchTime(v time.Time) {
	o.LaunchTime = v
}

// GetPrivateIpAddress returns the PrivateIpAddress field value
func (o *ClusterInstance) GetPrivateIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateIpAddress
}

// GetPrivateIpAddressOk returns a tuple with the PrivateIpAddress field value
// and a boolean to check if the value has been set.
func (o *ClusterInstance) GetPrivateIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateIpAddress, true
}

// SetPrivateIpAddress sets field value
func (o *ClusterInstance) SetPrivateIpAddress(v string) {
	o.PrivateIpAddress = v
}

// GetPublicIpAddress returns the PublicIpAddress field value if set, zero value otherwise.
func (o *ClusterInstance) GetPublicIpAddress() string {
	if o == nil || IsNil(o.PublicIpAddress) {
		var ret string
		return ret
	}
	return *o.PublicIpAddress
}

// GetPublicIpAddressOk returns a tuple with the PublicIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInstance) GetPublicIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.PublicIpAddress) {
		return nil, false
	}
	return o.PublicIpAddress, true
}

// HasPublicIpAddress returns a boolean if a field has been set.
func (o *ClusterInstance) HasPublicIpAddress() bool {
	if o != nil && !IsNil(o.PublicIpAddress) {
		return true
	}

	return false
}

// SetPublicIpAddress gets a reference to the given string and assigns it to the PublicIpAddress field.
func (o *ClusterInstance) SetPublicIpAddress(v string) {
	o.PublicIpAddress = &v
}

// GetState returns the State field value
func (o *ClusterInstance) GetState() InstanceState {
	if o == nil {
		var ret InstanceState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *ClusterInstance) GetStateOk() (*InstanceState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *ClusterInstance) SetState(v InstanceState) {
	o.State = v
}

// GetNodeType returns the NodeType field value
func (o *ClusterInstance) GetNodeType() NodeType {
	if o == nil {
		var ret NodeType
		return ret
	}

	return o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value
// and a boolean to check if the value has been set.
func (o *ClusterInstance) GetNodeTypeOk() (*NodeType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeType, true
}

// SetNodeType sets field value
func (o *ClusterInstance) SetNodeType(v NodeType) {
	o.NodeType = v
}

// GetQueueName returns the QueueName field value if set, zero value otherwise.
func (o *ClusterInstance) GetQueueName() string {
	if o == nil || IsNil(o.QueueName) {
		var ret string
		return ret
	}
	return *o.QueueName
}

// GetQueueNameOk returns a tuple with the QueueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInstance) GetQueueNameOk() (*string, bool) {
	if o == nil || IsNil(o.QueueName) {
		return nil, false
	}
	return o.QueueName, true
}

// HasQueueName returns a boolean if a field has been set.
func (o *ClusterInstance) HasQueueName() bool {
	if o != nil && !IsNil(o.QueueName) {
		return true
	}

	return false
}

// SetQueueName gets a reference to the given string and assigns it to the QueueName field.
func (o *ClusterInstance) SetQueueName(v string) {
	o.QueueName = &v
}

// GetPoolName returns the PoolName field value if set, zero value otherwise.
func (o *ClusterInstance) GetPoolName() string {
	if o == nil || IsNil(o.PoolName) {
		var ret string
		return ret
	}
	return *o.PoolName
}

// GetPoolNameOk returns a tuple with the PoolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInstance) GetPoolNameOk() (*string, bool) {
	if o == nil || IsNil(o.PoolName) {
		return nil, false
	}
	return o.PoolName, true
}

// HasPoolName returns a boolean if a field has been set.
func (o *ClusterInstance) HasPoolName() bool {
	if o != nil && !IsNil(o.PoolName) {
		return true
	}

	return false
}

// SetPoolName gets a reference to the given string and assigns it to the PoolName field.
func (o *ClusterInstance) SetPoolName(v string) {
	o.PoolName = &v
}

func (o ClusterInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["instanceId"] = o.InstanceId
	toSerialize["instanceType"] = o.InstanceType
	toSerialize["launchTime"] = o.LaunchTime
	toSerialize["privateIpAddress"] = o.PrivateIpAddress
	if !IsNil(o.PublicIpAddress) {
		toSerialize["publicIpAddress"] = o.PublicIpAddress
	}
	toSerialize["state"] = o.State
	toSerialize["nodeType"] = o.NodeType
	if !IsNil(o.QueueName) {
		toSerialize["queueName"] = o.QueueName
	}
	if !IsNil(o.PoolName) {
		toSerialize["poolName"] = o.PoolName
	}
	return toSerialize, nil
}

func (o *ClusterInstance) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instanceId",
		"instanceType",
		"launchTime",
		"privateIpAddress",
		"state",
		"nodeType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterInstance := _ClusterInstance{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterInstance)

	if err != nil {
		return err
	}

	*o = ClusterInstance(varClusterInstance)

	return err
}

type NullableClusterInstance struct {
	value *ClusterInstance
	isSet bool
}

func (v NullableClusterInstance) Get() *ClusterInstance {
	return v.value
}

func (v *NullableClusterInstance) Set(val *ClusterInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterInstance(val *ClusterInstance) *NullableClusterInstance {
	return &NullableClusterInstance{value: val, isSet: true}
}

func (v NullableClusterInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


