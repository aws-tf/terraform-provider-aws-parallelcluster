/*
ParallelCluster

ParallelCluster API

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListImageLogStreamsResponseContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListImageLogStreamsResponseContent{}

// ListImageLogStreamsResponseContent struct for ListImageLogStreamsResponseContent
type ListImageLogStreamsResponseContent struct {
	// Token to use for paginated requests.
	NextToken *string `json:"nextToken,omitempty"`
	LogStreams []LogStream `json:"logStreams"`
}

type _ListImageLogStreamsResponseContent ListImageLogStreamsResponseContent

// NewListImageLogStreamsResponseContent instantiates a new ListImageLogStreamsResponseContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListImageLogStreamsResponseContent(logStreams []LogStream) *ListImageLogStreamsResponseContent {
	this := ListImageLogStreamsResponseContent{}
	this.LogStreams = logStreams
	return &this
}

// NewListImageLogStreamsResponseContentWithDefaults instantiates a new ListImageLogStreamsResponseContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListImageLogStreamsResponseContentWithDefaults() *ListImageLogStreamsResponseContent {
	this := ListImageLogStreamsResponseContent{}
	return &this
}

// GetNextToken returns the NextToken field value if set, zero value otherwise.
func (o *ListImageLogStreamsResponseContent) GetNextToken() string {
	if o == nil || IsNil(o.NextToken) {
		var ret string
		return ret
	}
	return *o.NextToken
}

// GetNextTokenOk returns a tuple with the NextToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListImageLogStreamsResponseContent) GetNextTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextToken) {
		return nil, false
	}
	return o.NextToken, true
}

// HasNextToken returns a boolean if a field has been set.
func (o *ListImageLogStreamsResponseContent) HasNextToken() bool {
	if o != nil && !IsNil(o.NextToken) {
		return true
	}

	return false
}

// SetNextToken gets a reference to the given string and assigns it to the NextToken field.
func (o *ListImageLogStreamsResponseContent) SetNextToken(v string) {
	o.NextToken = &v
}

// GetLogStreams returns the LogStreams field value
func (o *ListImageLogStreamsResponseContent) GetLogStreams() []LogStream {
	if o == nil {
		var ret []LogStream
		return ret
	}

	return o.LogStreams
}

// GetLogStreamsOk returns a tuple with the LogStreams field value
// and a boolean to check if the value has been set.
func (o *ListImageLogStreamsResponseContent) GetLogStreamsOk() ([]LogStream, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogStreams, true
}

// SetLogStreams sets field value
func (o *ListImageLogStreamsResponseContent) SetLogStreams(v []LogStream) {
	o.LogStreams = v
}

func (o ListImageLogStreamsResponseContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListImageLogStreamsResponseContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextToken) {
		toSerialize["nextToken"] = o.NextToken
	}
	toSerialize["logStreams"] = o.LogStreams
	return toSerialize, nil
}

func (o *ListImageLogStreamsResponseContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"logStreams",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListImageLogStreamsResponseContent := _ListImageLogStreamsResponseContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListImageLogStreamsResponseContent)

	if err != nil {
		return err
	}

	*o = ListImageLogStreamsResponseContent(varListImageLogStreamsResponseContent)

	return err
}

type NullableListImageLogStreamsResponseContent struct {
	value *ListImageLogStreamsResponseContent
	isSet bool
}

func (v NullableListImageLogStreamsResponseContent) Get() *ListImageLogStreamsResponseContent {
	return v.value
}

func (v *NullableListImageLogStreamsResponseContent) Set(val *ListImageLogStreamsResponseContent) {
	v.value = val
	v.isSet = true
}

func (v NullableListImageLogStreamsResponseContent) IsSet() bool {
	return v.isSet
}

func (v *NullableListImageLogStreamsResponseContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListImageLogStreamsResponseContent(val *ListImageLogStreamsResponseContent) *NullableListImageLogStreamsResponseContent {
	return &NullableListImageLogStreamsResponseContent{value: val, isSet: true}
}

func (v NullableListImageLogStreamsResponseContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListImageLogStreamsResponseContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


