/*
ParallelCluster

ParallelCluster API

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AmiInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AmiInfo{}

// AmiInfo struct for AmiInfo
type AmiInfo struct {
	Architecture string `json:"architecture"`
	AmiId string `json:"amiId"`
	Name string `json:"name"`
	Os string `json:"os"`
	Version string `json:"version"`
}

type _AmiInfo AmiInfo

// NewAmiInfo instantiates a new AmiInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmiInfo(architecture string, amiId string, name string, os string, version string) *AmiInfo {
	this := AmiInfo{}
	this.Architecture = architecture
	this.AmiId = amiId
	this.Name = name
	this.Os = os
	this.Version = version
	return &this
}

// NewAmiInfoWithDefaults instantiates a new AmiInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmiInfoWithDefaults() *AmiInfo {
	this := AmiInfo{}
	return &this
}

// GetArchitecture returns the Architecture field value
func (o *AmiInfo) GetArchitecture() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Architecture
}

// GetArchitectureOk returns a tuple with the Architecture field value
// and a boolean to check if the value has been set.
func (o *AmiInfo) GetArchitectureOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Architecture, true
}

// SetArchitecture sets field value
func (o *AmiInfo) SetArchitecture(v string) {
	o.Architecture = v
}

// GetAmiId returns the AmiId field value
func (o *AmiInfo) GetAmiId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmiId
}

// GetAmiIdOk returns a tuple with the AmiId field value
// and a boolean to check if the value has been set.
func (o *AmiInfo) GetAmiIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmiId, true
}

// SetAmiId sets field value
func (o *AmiInfo) SetAmiId(v string) {
	o.AmiId = v
}

// GetName returns the Name field value
func (o *AmiInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AmiInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AmiInfo) SetName(v string) {
	o.Name = v
}

// GetOs returns the Os field value
func (o *AmiInfo) GetOs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Os
}

// GetOsOk returns a tuple with the Os field value
// and a boolean to check if the value has been set.
func (o *AmiInfo) GetOsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Os, true
}

// SetOs sets field value
func (o *AmiInfo) SetOs(v string) {
	o.Os = v
}

// GetVersion returns the Version field value
func (o *AmiInfo) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *AmiInfo) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *AmiInfo) SetVersion(v string) {
	o.Version = v
}

func (o AmiInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AmiInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["architecture"] = o.Architecture
	toSerialize["amiId"] = o.AmiId
	toSerialize["name"] = o.Name
	toSerialize["os"] = o.Os
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

func (o *AmiInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"architecture",
		"amiId",
		"name",
		"os",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAmiInfo := _AmiInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAmiInfo)

	if err != nil {
		return err
	}

	*o = AmiInfo(varAmiInfo)

	return err
}

type NullableAmiInfo struct {
	value *AmiInfo
	isSet bool
}

func (v NullableAmiInfo) Get() *AmiInfo {
	return v.value
}

func (v *NullableAmiInfo) Set(val *AmiInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAmiInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAmiInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmiInfo(val *AmiInfo) *NullableAmiInfo {
	return &NullableAmiInfo{value: val, isSet: true}
}

func (v NullableAmiInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmiInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


