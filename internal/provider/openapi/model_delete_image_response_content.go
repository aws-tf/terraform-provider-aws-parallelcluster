/*
ParallelCluster

ParallelCluster API

API version: 3.8.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeleteImageResponseContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteImageResponseContent{}

// DeleteImageResponseContent struct for DeleteImageResponseContent
type DeleteImageResponseContent struct {
	Image ImageInfoSummary `json:"image"`
}

type _DeleteImageResponseContent DeleteImageResponseContent

// NewDeleteImageResponseContent instantiates a new DeleteImageResponseContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteImageResponseContent(image ImageInfoSummary) *DeleteImageResponseContent {
	this := DeleteImageResponseContent{}
	this.Image = image
	return &this
}

// NewDeleteImageResponseContentWithDefaults instantiates a new DeleteImageResponseContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteImageResponseContentWithDefaults() *DeleteImageResponseContent {
	this := DeleteImageResponseContent{}
	return &this
}

// GetImage returns the Image field value
func (o *DeleteImageResponseContent) GetImage() ImageInfoSummary {
	if o == nil {
		var ret ImageInfoSummary
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *DeleteImageResponseContent) GetImageOk() (*ImageInfoSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *DeleteImageResponseContent) SetImage(v ImageInfoSummary) {
	o.Image = v
}

func (o DeleteImageResponseContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteImageResponseContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image"] = o.Image
	return toSerialize, nil
}

func (o *DeleteImageResponseContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteImageResponseContent := _DeleteImageResponseContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteImageResponseContent)

	if err != nil {
		return err
	}

	*o = DeleteImageResponseContent(varDeleteImageResponseContent)

	return err
}

type NullableDeleteImageResponseContent struct {
	value *DeleteImageResponseContent
	isSet bool
}

func (v NullableDeleteImageResponseContent) Get() *DeleteImageResponseContent {
	return v.value
}

func (v *NullableDeleteImageResponseContent) Set(val *DeleteImageResponseContent) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteImageResponseContent) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteImageResponseContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteImageResponseContent(val *DeleteImageResponseContent) *NullableDeleteImageResponseContent {
	return &NullableDeleteImageResponseContent{value: val, isSet: true}
}

func (v NullableDeleteImageResponseContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteImageResponseContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


