/*
ParallelCluster

ParallelCluster API

API version: 3.10.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Ec2AmiInfoSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ec2AmiInfoSummary{}

// Ec2AmiInfoSummary struct for Ec2AmiInfoSummary
type Ec2AmiInfoSummary struct {
	// EC2 AMI id
	AmiId string `json:"amiId"`
}

type _Ec2AmiInfoSummary Ec2AmiInfoSummary

// NewEc2AmiInfoSummary instantiates a new Ec2AmiInfoSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEc2AmiInfoSummary(amiId string) *Ec2AmiInfoSummary {
	this := Ec2AmiInfoSummary{}
	this.AmiId = amiId
	return &this
}

// NewEc2AmiInfoSummaryWithDefaults instantiates a new Ec2AmiInfoSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEc2AmiInfoSummaryWithDefaults() *Ec2AmiInfoSummary {
	this := Ec2AmiInfoSummary{}
	return &this
}

// GetAmiId returns the AmiId field value
func (o *Ec2AmiInfoSummary) GetAmiId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmiId
}

// GetAmiIdOk returns a tuple with the AmiId field value
// and a boolean to check if the value has been set.
func (o *Ec2AmiInfoSummary) GetAmiIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmiId, true
}

// SetAmiId sets field value
func (o *Ec2AmiInfoSummary) SetAmiId(v string) {
	o.AmiId = v
}

func (o Ec2AmiInfoSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ec2AmiInfoSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amiId"] = o.AmiId
	return toSerialize, nil
}

func (o *Ec2AmiInfoSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amiId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEc2AmiInfoSummary := _Ec2AmiInfoSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEc2AmiInfoSummary)

	if err != nil {
		return err
	}

	*o = Ec2AmiInfoSummary(varEc2AmiInfoSummary)

	return err
}

type NullableEc2AmiInfoSummary struct {
	value *Ec2AmiInfoSummary
	isSet bool
}

func (v NullableEc2AmiInfoSummary) Get() *Ec2AmiInfoSummary {
	return v.value
}

func (v *NullableEc2AmiInfoSummary) Set(val *Ec2AmiInfoSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableEc2AmiInfoSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableEc2AmiInfoSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEc2AmiInfoSummary(val *Ec2AmiInfoSummary) *NullableEc2AmiInfoSummary {
	return &NullableEc2AmiInfoSummary{value: val, isSet: true}
}

func (v NullableEc2AmiInfoSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEc2AmiInfoSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
