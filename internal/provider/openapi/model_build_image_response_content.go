/*
ParallelCluster

ParallelCluster API

API version: 3.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BuildImageResponseContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildImageResponseContent{}

// BuildImageResponseContent struct for BuildImageResponseContent
type BuildImageResponseContent struct {
	Image ImageInfoSummary `json:"image"`
	// List of messages collected during image config validation whose level is lower than the 'validationFailureLevel' set by the user.
	ValidationMessages []ConfigValidationMessage `json:"validationMessages,omitempty"`
}

type _BuildImageResponseContent BuildImageResponseContent

// NewBuildImageResponseContent instantiates a new BuildImageResponseContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildImageResponseContent(image ImageInfoSummary) *BuildImageResponseContent {
	this := BuildImageResponseContent{}
	this.Image = image
	return &this
}

// NewBuildImageResponseContentWithDefaults instantiates a new BuildImageResponseContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildImageResponseContentWithDefaults() *BuildImageResponseContent {
	this := BuildImageResponseContent{}
	return &this
}

// GetImage returns the Image field value
func (o *BuildImageResponseContent) GetImage() ImageInfoSummary {
	if o == nil {
		var ret ImageInfoSummary
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *BuildImageResponseContent) GetImageOk() (*ImageInfoSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *BuildImageResponseContent) SetImage(v ImageInfoSummary) {
	o.Image = v
}

// GetValidationMessages returns the ValidationMessages field value if set, zero value otherwise.
func (o *BuildImageResponseContent) GetValidationMessages() []ConfigValidationMessage {
	if o == nil || IsNil(o.ValidationMessages) {
		var ret []ConfigValidationMessage
		return ret
	}
	return o.ValidationMessages
}

// GetValidationMessagesOk returns a tuple with the ValidationMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BuildImageResponseContent) GetValidationMessagesOk() ([]ConfigValidationMessage, bool) {
	if o == nil || IsNil(o.ValidationMessages) {
		return nil, false
	}
	return o.ValidationMessages, true
}

// HasValidationMessages returns a boolean if a field has been set.
func (o *BuildImageResponseContent) HasValidationMessages() bool {
	if o != nil && !IsNil(o.ValidationMessages) {
		return true
	}

	return false
}

// SetValidationMessages gets a reference to the given []ConfigValidationMessage and assigns it to the ValidationMessages field.
func (o *BuildImageResponseContent) SetValidationMessages(v []ConfigValidationMessage) {
	o.ValidationMessages = v
}

func (o BuildImageResponseContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildImageResponseContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["image"] = o.Image
	if !IsNil(o.ValidationMessages) {
		toSerialize["validationMessages"] = o.ValidationMessages
	}
	return toSerialize, nil
}

func (o *BuildImageResponseContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"image",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuildImageResponseContent := _BuildImageResponseContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuildImageResponseContent)

	if err != nil {
		return err
	}

	*o = BuildImageResponseContent(varBuildImageResponseContent)

	return err
}

type NullableBuildImageResponseContent struct {
	value *BuildImageResponseContent
	isSet bool
}

func (v NullableBuildImageResponseContent) Get() *BuildImageResponseContent {
	return v.value
}

func (v *NullableBuildImageResponseContent) Set(val *BuildImageResponseContent) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildImageResponseContent) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildImageResponseContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildImageResponseContent(val *BuildImageResponseContent) *NullableBuildImageResponseContent {
	return &NullableBuildImageResponseContent{value: val, isSet: true}
}

func (v NullableBuildImageResponseContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildImageResponseContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


