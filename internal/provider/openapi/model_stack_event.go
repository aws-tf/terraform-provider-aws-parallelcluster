/*
ParallelCluster

ParallelCluster API

API version: 3.10.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the StackEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StackEvent{}

// StackEvent struct for StackEvent
type StackEvent struct {
	// The unique ID name of the instance of the stack.
	StackId string `json:"stackId"`
	// The unique ID of this event.
	EventId string `json:"eventId"`
	// The name associated with a stack.
	StackName string `json:"stackName"`
	// The logical name of the resource specified in the template.
	LogicalResourceId string `json:"logicalResourceId"`
	// The name or unique identifier associated with the physical instance of the resource.
	PhysicalResourceId string `json:"physicalResourceId"`
	// Type of resource.
	ResourceType string `json:"resourceType"`
	// Time the status was updated.
	Timestamp time.Time `json:"timestamp"`
	ResourceStatus CloudFormationResourceStatus `json:"resourceStatus"`
	// Success/failure message associated with the resource.
	ResourceStatusReason *string `json:"resourceStatusReason,omitempty"`
	// BLOB of the properties used to create the resource.
	ResourceProperties *string `json:"resourceProperties,omitempty"`
	// The token passed to the operation that generated this event.
	ClientRequestToken *string `json:"clientRequestToken,omitempty"`
}

type _StackEvent StackEvent

// NewStackEvent instantiates a new StackEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackEvent(stackId string, eventId string, stackName string, logicalResourceId string, physicalResourceId string, resourceType string, timestamp time.Time, resourceStatus CloudFormationResourceStatus) *StackEvent {
	this := StackEvent{}
	this.StackId = stackId
	this.EventId = eventId
	this.StackName = stackName
	this.LogicalResourceId = logicalResourceId
	this.PhysicalResourceId = physicalResourceId
	this.ResourceType = resourceType
	this.Timestamp = timestamp
	this.ResourceStatus = resourceStatus
	return &this
}

// NewStackEventWithDefaults instantiates a new StackEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackEventWithDefaults() *StackEvent {
	this := StackEvent{}
	return &this
}

// GetStackId returns the StackId field value
func (o *StackEvent) GetStackId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StackId
}

// GetStackIdOk returns a tuple with the StackId field value
// and a boolean to check if the value has been set.
func (o *StackEvent) GetStackIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StackId, true
}

// SetStackId sets field value
func (o *StackEvent) SetStackId(v string) {
	o.StackId = v
}

// GetEventId returns the EventId field value
func (o *StackEvent) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *StackEvent) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *StackEvent) SetEventId(v string) {
	o.EventId = v
}

// GetStackName returns the StackName field value
func (o *StackEvent) GetStackName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StackName
}

// GetStackNameOk returns a tuple with the StackName field value
// and a boolean to check if the value has been set.
func (o *StackEvent) GetStackNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StackName, true
}

// SetStackName sets field value
func (o *StackEvent) SetStackName(v string) {
	o.StackName = v
}

// GetLogicalResourceId returns the LogicalResourceId field value
func (o *StackEvent) GetLogicalResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LogicalResourceId
}

// GetLogicalResourceIdOk returns a tuple with the LogicalResourceId field value
// and a boolean to check if the value has been set.
func (o *StackEvent) GetLogicalResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LogicalResourceId, true
}

// SetLogicalResourceId sets field value
func (o *StackEvent) SetLogicalResourceId(v string) {
	o.LogicalResourceId = v
}

// GetPhysicalResourceId returns the PhysicalResourceId field value
func (o *StackEvent) GetPhysicalResourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PhysicalResourceId
}

// GetPhysicalResourceIdOk returns a tuple with the PhysicalResourceId field value
// and a boolean to check if the value has been set.
func (o *StackEvent) GetPhysicalResourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PhysicalResourceId, true
}

// SetPhysicalResourceId sets field value
func (o *StackEvent) SetPhysicalResourceId(v string) {
	o.PhysicalResourceId = v
}

// GetResourceType returns the ResourceType field value
func (o *StackEvent) GetResourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value
// and a boolean to check if the value has been set.
func (o *StackEvent) GetResourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceType, true
}

// SetResourceType sets field value
func (o *StackEvent) SetResourceType(v string) {
	o.ResourceType = v
}

// GetTimestamp returns the Timestamp field value
func (o *StackEvent) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *StackEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *StackEvent) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetResourceStatus returns the ResourceStatus field value
func (o *StackEvent) GetResourceStatus() CloudFormationResourceStatus {
	if o == nil {
		var ret CloudFormationResourceStatus
		return ret
	}

	return o.ResourceStatus
}

// GetResourceStatusOk returns a tuple with the ResourceStatus field value
// and a boolean to check if the value has been set.
func (o *StackEvent) GetResourceStatusOk() (*CloudFormationResourceStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceStatus, true
}

// SetResourceStatus sets field value
func (o *StackEvent) SetResourceStatus(v CloudFormationResourceStatus) {
	o.ResourceStatus = v
}

// GetResourceStatusReason returns the ResourceStatusReason field value if set, zero value otherwise.
func (o *StackEvent) GetResourceStatusReason() string {
	if o == nil || IsNil(o.ResourceStatusReason) {
		var ret string
		return ret
	}
	return *o.ResourceStatusReason
}

// GetResourceStatusReasonOk returns a tuple with the ResourceStatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackEvent) GetResourceStatusReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceStatusReason) {
		return nil, false
	}
	return o.ResourceStatusReason, true
}

// HasResourceStatusReason returns a boolean if a field has been set.
func (o *StackEvent) HasResourceStatusReason() bool {
	if o != nil && !IsNil(o.ResourceStatusReason) {
		return true
	}

	return false
}

// SetResourceStatusReason gets a reference to the given string and assigns it to the ResourceStatusReason field.
func (o *StackEvent) SetResourceStatusReason(v string) {
	o.ResourceStatusReason = &v
}

// GetResourceProperties returns the ResourceProperties field value if set, zero value otherwise.
func (o *StackEvent) GetResourceProperties() string {
	if o == nil || IsNil(o.ResourceProperties) {
		var ret string
		return ret
	}
	return *o.ResourceProperties
}

// GetResourcePropertiesOk returns a tuple with the ResourceProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackEvent) GetResourcePropertiesOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceProperties) {
		return nil, false
	}
	return o.ResourceProperties, true
}

// HasResourceProperties returns a boolean if a field has been set.
func (o *StackEvent) HasResourceProperties() bool {
	if o != nil && !IsNil(o.ResourceProperties) {
		return true
	}

	return false
}

// SetResourceProperties gets a reference to the given string and assigns it to the ResourceProperties field.
func (o *StackEvent) SetResourceProperties(v string) {
	o.ResourceProperties = &v
}

// GetClientRequestToken returns the ClientRequestToken field value if set, zero value otherwise.
func (o *StackEvent) GetClientRequestToken() string {
	if o == nil || IsNil(o.ClientRequestToken) {
		var ret string
		return ret
	}
	return *o.ClientRequestToken
}

// GetClientRequestTokenOk returns a tuple with the ClientRequestToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackEvent) GetClientRequestTokenOk() (*string, bool) {
	if o == nil || IsNil(o.ClientRequestToken) {
		return nil, false
	}
	return o.ClientRequestToken, true
}

// HasClientRequestToken returns a boolean if a field has been set.
func (o *StackEvent) HasClientRequestToken() bool {
	if o != nil && !IsNil(o.ClientRequestToken) {
		return true
	}

	return false
}

// SetClientRequestToken gets a reference to the given string and assigns it to the ClientRequestToken field.
func (o *StackEvent) SetClientRequestToken(v string) {
	o.ClientRequestToken = &v
}

func (o StackEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StackEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stackId"] = o.StackId
	toSerialize["eventId"] = o.EventId
	toSerialize["stackName"] = o.StackName
	toSerialize["logicalResourceId"] = o.LogicalResourceId
	toSerialize["physicalResourceId"] = o.PhysicalResourceId
	toSerialize["resourceType"] = o.ResourceType
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["resourceStatus"] = o.ResourceStatus
	if !IsNil(o.ResourceStatusReason) {
		toSerialize["resourceStatusReason"] = o.ResourceStatusReason
	}
	if !IsNil(o.ResourceProperties) {
		toSerialize["resourceProperties"] = o.ResourceProperties
	}
	if !IsNil(o.ClientRequestToken) {
		toSerialize["clientRequestToken"] = o.ClientRequestToken
	}
	return toSerialize, nil
}

func (o *StackEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"stackId",
		"eventId",
		"stackName",
		"logicalResourceId",
		"physicalResourceId",
		"resourceType",
		"timestamp",
		"resourceStatus",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStackEvent := _StackEvent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStackEvent)

	if err != nil {
		return err
	}

	*o = StackEvent(varStackEvent)

	return err
}

type NullableStackEvent struct {
	value *StackEvent
	isSet bool
}

func (v NullableStackEvent) Get() *StackEvent {
	return v.value
}

func (v *NullableStackEvent) Set(val *StackEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableStackEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableStackEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackEvent(val *StackEvent) *NullableStackEvent {
	return &NullableStackEvent{value: val, isSet: true}
}

func (v NullableStackEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
