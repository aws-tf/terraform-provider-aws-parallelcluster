/*
ParallelCluster

ParallelCluster API

API version: 3.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Ec2AmiInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ec2AmiInfo{}

// Ec2AmiInfo struct for Ec2AmiInfo
type Ec2AmiInfo struct {
	// EC2 AMI id
	AmiId string `json:"amiId"`
	// EC2 AMI Tags
	Tags []Tag `json:"tags,omitempty"`
	// EC2 AMI name
	AmiName *string `json:"amiName,omitempty"`
	// EC2 AMI architecture
	Architecture *string `json:"architecture,omitempty"`
	State *Ec2AmiState `json:"state,omitempty"`
	// EC2 AMI description
	Description *string `json:"description,omitempty"`
}

type _Ec2AmiInfo Ec2AmiInfo

// NewEc2AmiInfo instantiates a new Ec2AmiInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEc2AmiInfo(amiId string) *Ec2AmiInfo {
	this := Ec2AmiInfo{}
	this.AmiId = amiId
	return &this
}

// NewEc2AmiInfoWithDefaults instantiates a new Ec2AmiInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEc2AmiInfoWithDefaults() *Ec2AmiInfo {
	this := Ec2AmiInfo{}
	return &this
}

// GetAmiId returns the AmiId field value
func (o *Ec2AmiInfo) GetAmiId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AmiId
}

// GetAmiIdOk returns a tuple with the AmiId field value
// and a boolean to check if the value has been set.
func (o *Ec2AmiInfo) GetAmiIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AmiId, true
}

// SetAmiId sets field value
func (o *Ec2AmiInfo) SetAmiId(v string) {
	o.AmiId = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Ec2AmiInfo) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ec2AmiInfo) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Ec2AmiInfo) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *Ec2AmiInfo) SetTags(v []Tag) {
	o.Tags = v
}

// GetAmiName returns the AmiName field value if set, zero value otherwise.
func (o *Ec2AmiInfo) GetAmiName() string {
	if o == nil || IsNil(o.AmiName) {
		var ret string
		return ret
	}
	return *o.AmiName
}

// GetAmiNameOk returns a tuple with the AmiName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ec2AmiInfo) GetAmiNameOk() (*string, bool) {
	if o == nil || IsNil(o.AmiName) {
		return nil, false
	}
	return o.AmiName, true
}

// HasAmiName returns a boolean if a field has been set.
func (o *Ec2AmiInfo) HasAmiName() bool {
	if o != nil && !IsNil(o.AmiName) {
		return true
	}

	return false
}

// SetAmiName gets a reference to the given string and assigns it to the AmiName field.
func (o *Ec2AmiInfo) SetAmiName(v string) {
	o.AmiName = &v
}

// GetArchitecture returns the Architecture field value if set, zero value otherwise.
func (o *Ec2AmiInfo) GetArchitecture() string {
	if o == nil || IsNil(o.Architecture) {
		var ret string
		return ret
	}
	return *o.Architecture
}

// GetArchitectureOk returns a tuple with the Architecture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ec2AmiInfo) GetArchitectureOk() (*string, bool) {
	if o == nil || IsNil(o.Architecture) {
		return nil, false
	}
	return o.Architecture, true
}

// HasArchitecture returns a boolean if a field has been set.
func (o *Ec2AmiInfo) HasArchitecture() bool {
	if o != nil && !IsNil(o.Architecture) {
		return true
	}

	return false
}

// SetArchitecture gets a reference to the given string and assigns it to the Architecture field.
func (o *Ec2AmiInfo) SetArchitecture(v string) {
	o.Architecture = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Ec2AmiInfo) GetState() Ec2AmiState {
	if o == nil || IsNil(o.State) {
		var ret Ec2AmiState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ec2AmiInfo) GetStateOk() (*Ec2AmiState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Ec2AmiInfo) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given Ec2AmiState and assigns it to the State field.
func (o *Ec2AmiInfo) SetState(v Ec2AmiState) {
	o.State = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Ec2AmiInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ec2AmiInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Ec2AmiInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Ec2AmiInfo) SetDescription(v string) {
	o.Description = &v
}

func (o Ec2AmiInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ec2AmiInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amiId"] = o.AmiId
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.AmiName) {
		toSerialize["amiName"] = o.AmiName
	}
	if !IsNil(o.Architecture) {
		toSerialize["architecture"] = o.Architecture
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *Ec2AmiInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amiId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEc2AmiInfo := _Ec2AmiInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEc2AmiInfo)

	if err != nil {
		return err
	}

	*o = Ec2AmiInfo(varEc2AmiInfo)

	return err
}

type NullableEc2AmiInfo struct {
	value *Ec2AmiInfo
	isSet bool
}

func (v NullableEc2AmiInfo) Get() *Ec2AmiInfo {
	return v.value
}

func (v *NullableEc2AmiInfo) Set(val *Ec2AmiInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEc2AmiInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEc2AmiInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEc2AmiInfo(val *Ec2AmiInfo) *NullableEc2AmiInfo {
	return &NullableEc2AmiInfo{value: val, isSet: true}
}

func (v NullableEc2AmiInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEc2AmiInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


