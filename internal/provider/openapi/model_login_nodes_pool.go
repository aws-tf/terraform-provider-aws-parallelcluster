/*
ParallelCluster

ParallelCluster API

API version: 3.10.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoginNodesPool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoginNodesPool{}

// LoginNodesPool struct for LoginNodesPool
type LoginNodesPool struct {
	Status LoginNodesState `json:"status"`
	Address *string `json:"address,omitempty"`
	Scheme *string `json:"scheme,omitempty"`
	HealthyNodes *int32 `json:"healthyNodes,omitempty"`
	UnhealthyNodes *int32 `json:"unhealthyNodes,omitempty"`
}

type _LoginNodesPool LoginNodesPool

// NewLoginNodesPool instantiates a new LoginNodesPool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginNodesPool(status LoginNodesState) *LoginNodesPool {
	this := LoginNodesPool{}
	this.Status = status
	return &this
}

// NewLoginNodesPoolWithDefaults instantiates a new LoginNodesPool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginNodesPoolWithDefaults() *LoginNodesPool {
	this := LoginNodesPool{}
	return &this
}

// GetStatus returns the Status field value
func (o *LoginNodesPool) GetStatus() LoginNodesState {
	if o == nil {
		var ret LoginNodesState
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *LoginNodesPool) GetStatusOk() (*LoginNodesState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *LoginNodesPool) SetStatus(v LoginNodesState) {
	o.Status = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *LoginNodesPool) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginNodesPool) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *LoginNodesPool) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *LoginNodesPool) SetAddress(v string) {
	o.Address = &v
}

// GetScheme returns the Scheme field value if set, zero value otherwise.
func (o *LoginNodesPool) GetScheme() string {
	if o == nil || IsNil(o.Scheme) {
		var ret string
		return ret
	}
	return *o.Scheme
}

// GetSchemeOk returns a tuple with the Scheme field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginNodesPool) GetSchemeOk() (*string, bool) {
	if o == nil || IsNil(o.Scheme) {
		return nil, false
	}
	return o.Scheme, true
}

// HasScheme returns a boolean if a field has been set.
func (o *LoginNodesPool) HasScheme() bool {
	if o != nil && !IsNil(o.Scheme) {
		return true
	}

	return false
}

// SetScheme gets a reference to the given string and assigns it to the Scheme field.
func (o *LoginNodesPool) SetScheme(v string) {
	o.Scheme = &v
}

// GetHealthyNodes returns the HealthyNodes field value if set, zero value otherwise.
func (o *LoginNodesPool) GetHealthyNodes() int32 {
	if o == nil || IsNil(o.HealthyNodes) {
		var ret int32
		return ret
	}
	return *o.HealthyNodes
}

// GetHealthyNodesOk returns a tuple with the HealthyNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginNodesPool) GetHealthyNodesOk() (*int32, bool) {
	if o == nil || IsNil(o.HealthyNodes) {
		return nil, false
	}
	return o.HealthyNodes, true
}

// HasHealthyNodes returns a boolean if a field has been set.
func (o *LoginNodesPool) HasHealthyNodes() bool {
	if o != nil && !IsNil(o.HealthyNodes) {
		return true
	}

	return false
}

// SetHealthyNodes gets a reference to the given int32 and assigns it to the HealthyNodes field.
func (o *LoginNodesPool) SetHealthyNodes(v int32) {
	o.HealthyNodes = &v
}

// GetUnhealthyNodes returns the UnhealthyNodes field value if set, zero value otherwise.
func (o *LoginNodesPool) GetUnhealthyNodes() int32 {
	if o == nil || IsNil(o.UnhealthyNodes) {
		var ret int32
		return ret
	}
	return *o.UnhealthyNodes
}

// GetUnhealthyNodesOk returns a tuple with the UnhealthyNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginNodesPool) GetUnhealthyNodesOk() (*int32, bool) {
	if o == nil || IsNil(o.UnhealthyNodes) {
		return nil, false
	}
	return o.UnhealthyNodes, true
}

// HasUnhealthyNodes returns a boolean if a field has been set.
func (o *LoginNodesPool) HasUnhealthyNodes() bool {
	if o != nil && !IsNil(o.UnhealthyNodes) {
		return true
	}

	return false
}

// SetUnhealthyNodes gets a reference to the given int32 and assigns it to the UnhealthyNodes field.
func (o *LoginNodesPool) SetUnhealthyNodes(v int32) {
	o.UnhealthyNodes = &v
}

func (o LoginNodesPool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoginNodesPool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Scheme) {
		toSerialize["scheme"] = o.Scheme
	}
	if !IsNil(o.HealthyNodes) {
		toSerialize["healthyNodes"] = o.HealthyNodes
	}
	if !IsNil(o.UnhealthyNodes) {
		toSerialize["unhealthyNodes"] = o.UnhealthyNodes
	}
	return toSerialize, nil
}

func (o *LoginNodesPool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoginNodesPool := _LoginNodesPool{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoginNodesPool)

	if err != nil {
		return err
	}

	*o = LoginNodesPool(varLoginNodesPool)

	return err
}

type NullableLoginNodesPool struct {
	value *LoginNodesPool
	isSet bool
}

func (v NullableLoginNodesPool) Get() *LoginNodesPool {
	return v.value
}

func (v *NullableLoginNodesPool) Set(val *LoginNodesPool) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginNodesPool) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginNodesPool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginNodesPool(val *LoginNodesPool) *NullableLoginNodesPool {
	return &NullableLoginNodesPool{value: val, isSet: true}
}

func (v NullableLoginNodesPool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginNodesPool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
