/*
ParallelCluster

ParallelCluster API

API version: 3.10.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DescribeClusterInstancesResponseContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeClusterInstancesResponseContent{}

// DescribeClusterInstancesResponseContent struct for DescribeClusterInstancesResponseContent
type DescribeClusterInstancesResponseContent struct {
	// Token to use for paginated requests.
	NextToken *string `json:"nextToken,omitempty"`
	Instances []ClusterInstance `json:"instances"`
}

type _DescribeClusterInstancesResponseContent DescribeClusterInstancesResponseContent

// NewDescribeClusterInstancesResponseContent instantiates a new DescribeClusterInstancesResponseContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeClusterInstancesResponseContent(instances []ClusterInstance) *DescribeClusterInstancesResponseContent {
	this := DescribeClusterInstancesResponseContent{}
	this.Instances = instances
	return &this
}

// NewDescribeClusterInstancesResponseContentWithDefaults instantiates a new DescribeClusterInstancesResponseContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeClusterInstancesResponseContentWithDefaults() *DescribeClusterInstancesResponseContent {
	this := DescribeClusterInstancesResponseContent{}
	return &this
}

// GetNextToken returns the NextToken field value if set, zero value otherwise.
func (o *DescribeClusterInstancesResponseContent) GetNextToken() string {
	if o == nil || IsNil(o.NextToken) {
		var ret string
		return ret
	}
	return *o.NextToken
}

// GetNextTokenOk returns a tuple with the NextToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeClusterInstancesResponseContent) GetNextTokenOk() (*string, bool) {
	if o == nil || IsNil(o.NextToken) {
		return nil, false
	}
	return o.NextToken, true
}

// HasNextToken returns a boolean if a field has been set.
func (o *DescribeClusterInstancesResponseContent) HasNextToken() bool {
	if o != nil && !IsNil(o.NextToken) {
		return true
	}

	return false
}

// SetNextToken gets a reference to the given string and assigns it to the NextToken field.
func (o *DescribeClusterInstancesResponseContent) SetNextToken(v string) {
	o.NextToken = &v
}

// GetInstances returns the Instances field value
func (o *DescribeClusterInstancesResponseContent) GetInstances() []ClusterInstance {
	if o == nil {
		var ret []ClusterInstance
		return ret
	}

	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value
// and a boolean to check if the value has been set.
func (o *DescribeClusterInstancesResponseContent) GetInstancesOk() ([]ClusterInstance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instances, true
}

// SetInstances sets field value
func (o *DescribeClusterInstancesResponseContent) SetInstances(v []ClusterInstance) {
	o.Instances = v
}

func (o DescribeClusterInstancesResponseContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeClusterInstancesResponseContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NextToken) {
		toSerialize["nextToken"] = o.NextToken
	}
	toSerialize["instances"] = o.Instances
	return toSerialize, nil
}

func (o *DescribeClusterInstancesResponseContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"instances",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeClusterInstancesResponseContent := _DescribeClusterInstancesResponseContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeClusterInstancesResponseContent)

	if err != nil {
		return err
	}

	*o = DescribeClusterInstancesResponseContent(varDescribeClusterInstancesResponseContent)

	return err
}

type NullableDescribeClusterInstancesResponseContent struct {
	value *DescribeClusterInstancesResponseContent
	isSet bool
}

func (v NullableDescribeClusterInstancesResponseContent) Get() *DescribeClusterInstancesResponseContent {
	return v.value
}

func (v *NullableDescribeClusterInstancesResponseContent) Set(val *DescribeClusterInstancesResponseContent) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeClusterInstancesResponseContent) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeClusterInstancesResponseContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeClusterInstancesResponseContent(val *DescribeClusterInstancesResponseContent) *NullableDescribeClusterInstancesResponseContent {
	return &NullableDescribeClusterInstancesResponseContent{value: val, isSet: true}
}

func (v NullableDescribeClusterInstancesResponseContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeClusterInstancesResponseContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
