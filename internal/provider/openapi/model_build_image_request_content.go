/*
ParallelCluster

ParallelCluster API

API version: 3.10.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BuildImageRequestContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BuildImageRequestContent{}

// BuildImageRequestContent struct for BuildImageRequestContent
type BuildImageRequestContent struct {
	// Image configuration as a YAML document.
	ImageConfiguration string `json:"imageConfiguration"`
	// Id of the Image that will be built.
	ImageId string `json:"imageId"`
}

type _BuildImageRequestContent BuildImageRequestContent

// NewBuildImageRequestContent instantiates a new BuildImageRequestContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBuildImageRequestContent(imageConfiguration string, imageId string) *BuildImageRequestContent {
	this := BuildImageRequestContent{}
	this.ImageConfiguration = imageConfiguration
	this.ImageId = imageId
	return &this
}

// NewBuildImageRequestContentWithDefaults instantiates a new BuildImageRequestContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBuildImageRequestContentWithDefaults() *BuildImageRequestContent {
	this := BuildImageRequestContent{}
	return &this
}

// GetImageConfiguration returns the ImageConfiguration field value
func (o *BuildImageRequestContent) GetImageConfiguration() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageConfiguration
}

// GetImageConfigurationOk returns a tuple with the ImageConfiguration field value
// and a boolean to check if the value has been set.
func (o *BuildImageRequestContent) GetImageConfigurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageConfiguration, true
}

// SetImageConfiguration sets field value
func (o *BuildImageRequestContent) SetImageConfiguration(v string) {
	o.ImageConfiguration = v
}

// GetImageId returns the ImageId field value
func (o *BuildImageRequestContent) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *BuildImageRequestContent) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *BuildImageRequestContent) SetImageId(v string) {
	o.ImageId = v
}

func (o BuildImageRequestContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BuildImageRequestContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imageConfiguration"] = o.ImageConfiguration
	toSerialize["imageId"] = o.ImageId
	return toSerialize, nil
}

func (o *BuildImageRequestContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageConfiguration",
		"imageId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBuildImageRequestContent := _BuildImageRequestContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBuildImageRequestContent)

	if err != nil {
		return err
	}

	*o = BuildImageRequestContent(varBuildImageRequestContent)

	return err
}

type NullableBuildImageRequestContent struct {
	value *BuildImageRequestContent
	isSet bool
}

func (v NullableBuildImageRequestContent) Get() *BuildImageRequestContent {
	return v.value
}

func (v *NullableBuildImageRequestContent) Set(val *BuildImageRequestContent) {
	v.value = val
	v.isSet = true
}

func (v NullableBuildImageRequestContent) IsSet() bool {
	return v.isSet
}

func (v *NullableBuildImageRequestContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBuildImageRequestContent(val *BuildImageRequestContent) *NullableBuildImageRequestContent {
	return &NullableBuildImageRequestContent{value: val, isSet: true}
}

func (v NullableBuildImageRequestContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBuildImageRequestContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
