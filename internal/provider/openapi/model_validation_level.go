/*
ParallelCluster

ParallelCluster API

API version: 3.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ValidationLevel the model 'ValidationLevel'
type ValidationLevel string

// List of ValidationLevel
const (
	VALIDATIONLEVEL_INFO ValidationLevel = "INFO"
	VALIDATIONLEVEL_WARNING ValidationLevel = "WARNING"
	VALIDATIONLEVEL_ERROR ValidationLevel = "ERROR"
)

// All allowed values of ValidationLevel enum
var AllowedValidationLevelEnumValues = []ValidationLevel{
	"INFO",
	"WARNING",
	"ERROR",
}

func (v *ValidationLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ValidationLevel(value)
	for _, existing := range AllowedValidationLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ValidationLevel", value)
}

// NewValidationLevelFromValue returns a pointer to a valid ValidationLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewValidationLevelFromValue(v string) (*ValidationLevel, error) {
	ev := ValidationLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ValidationLevel: valid values are %v", v, AllowedValidationLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ValidationLevel) IsValid() bool {
	for _, existing := range AllowedValidationLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ValidationLevel value
func (v ValidationLevel) Ptr() *ValidationLevel {
	return &v
}

type NullableValidationLevel struct {
	value *ValidationLevel
	isSet bool
}

func (v NullableValidationLevel) Get() *ValidationLevel {
	return v.value
}

func (v *NullableValidationLevel) Set(val *ValidationLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationLevel(val *ValidationLevel) *NullableValidationLevel {
	return &NullableValidationLevel{value: val, isSet: true}
}

func (v NullableValidationLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

