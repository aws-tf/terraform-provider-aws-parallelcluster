/*
ParallelCluster

ParallelCluster API

API version: 3.10.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateClusterResponseContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateClusterResponseContent{}

// UpdateClusterResponseContent struct for UpdateClusterResponseContent
type UpdateClusterResponseContent struct {
	Cluster ClusterInfoSummary `json:"cluster"`
	// List of messages collected during cluster config validation whose level is lower than the 'validationFailureLevel' set by the user.
	ValidationMessages []ConfigValidationMessage `json:"validationMessages,omitempty"`
	// List of configuration changes requested by the update operation.
	ChangeSet []Change `json:"changeSet"`
}

type _UpdateClusterResponseContent UpdateClusterResponseContent

// NewUpdateClusterResponseContent instantiates a new UpdateClusterResponseContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateClusterResponseContent(cluster ClusterInfoSummary, changeSet []Change) *UpdateClusterResponseContent {
	this := UpdateClusterResponseContent{}
	this.Cluster = cluster
	this.ChangeSet = changeSet
	return &this
}

// NewUpdateClusterResponseContentWithDefaults instantiates a new UpdateClusterResponseContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateClusterResponseContentWithDefaults() *UpdateClusterResponseContent {
	this := UpdateClusterResponseContent{}
	return &this
}

// GetCluster returns the Cluster field value
func (o *UpdateClusterResponseContent) GetCluster() ClusterInfoSummary {
	if o == nil {
		var ret ClusterInfoSummary
		return ret
	}

	return o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value
// and a boolean to check if the value has been set.
func (o *UpdateClusterResponseContent) GetClusterOk() (*ClusterInfoSummary, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cluster, true
}

// SetCluster sets field value
func (o *UpdateClusterResponseContent) SetCluster(v ClusterInfoSummary) {
	o.Cluster = v
}

// GetValidationMessages returns the ValidationMessages field value if set, zero value otherwise.
func (o *UpdateClusterResponseContent) GetValidationMessages() []ConfigValidationMessage {
	if o == nil || IsNil(o.ValidationMessages) {
		var ret []ConfigValidationMessage
		return ret
	}
	return o.ValidationMessages
}

// GetValidationMessagesOk returns a tuple with the ValidationMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateClusterResponseContent) GetValidationMessagesOk() ([]ConfigValidationMessage, bool) {
	if o == nil || IsNil(o.ValidationMessages) {
		return nil, false
	}
	return o.ValidationMessages, true
}

// HasValidationMessages returns a boolean if a field has been set.
func (o *UpdateClusterResponseContent) HasValidationMessages() bool {
	if o != nil && !IsNil(o.ValidationMessages) {
		return true
	}

	return false
}

// SetValidationMessages gets a reference to the given []ConfigValidationMessage and assigns it to the ValidationMessages field.
func (o *UpdateClusterResponseContent) SetValidationMessages(v []ConfigValidationMessage) {
	o.ValidationMessages = v
}

// GetChangeSet returns the ChangeSet field value
func (o *UpdateClusterResponseContent) GetChangeSet() []Change {
	if o == nil {
		var ret []Change
		return ret
	}

	return o.ChangeSet
}

// GetChangeSetOk returns a tuple with the ChangeSet field value
// and a boolean to check if the value has been set.
func (o *UpdateClusterResponseContent) GetChangeSetOk() ([]Change, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChangeSet, true
}

// SetChangeSet sets field value
func (o *UpdateClusterResponseContent) SetChangeSet(v []Change) {
	o.ChangeSet = v
}

func (o UpdateClusterResponseContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateClusterResponseContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cluster"] = o.Cluster
	if !IsNil(o.ValidationMessages) {
		toSerialize["validationMessages"] = o.ValidationMessages
	}
	toSerialize["changeSet"] = o.ChangeSet
	return toSerialize, nil
}

func (o *UpdateClusterResponseContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cluster",
		"changeSet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateClusterResponseContent := _UpdateClusterResponseContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateClusterResponseContent)

	if err != nil {
		return err
	}

	*o = UpdateClusterResponseContent(varUpdateClusterResponseContent)

	return err
}

type NullableUpdateClusterResponseContent struct {
	value *UpdateClusterResponseContent
	isSet bool
}

func (v NullableUpdateClusterResponseContent) Get() *UpdateClusterResponseContent {
	return v.value
}

func (v *NullableUpdateClusterResponseContent) Set(val *UpdateClusterResponseContent) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateClusterResponseContent) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateClusterResponseContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateClusterResponseContent(val *UpdateClusterResponseContent) *NullableUpdateClusterResponseContent {
	return &NullableUpdateClusterResponseContent{value: val, isSet: true}
}

func (v NullableUpdateClusterResponseContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateClusterResponseContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
