/*
ParallelCluster

ParallelCluster API

API version: 3.10.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DescribeImageResponseContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DescribeImageResponseContent{}

// DescribeImageResponseContent struct for DescribeImageResponseContent
type DescribeImageResponseContent struct {
	// Id of the Image to retrieve detailed information for.
	ImageId string `json:"imageId"`
	// AWS region where the image is created.
	Region string `json:"region"`
	// ParallelCluster version used to build the image.
	Version string `json:"version"`
	ImageBuildStatus ImageBuildStatus `json:"imageBuildStatus"`
	// ARN of the logs for the image build process.
	ImageBuildLogsArn *string `json:"imageBuildLogsArn,omitempty"`
	CloudformationStackStatus *CloudFormationStackStatus `json:"cloudformationStackStatus,omitempty"`
	// Reason for the CloudFormation stack status.
	CloudformationStackStatusReason *string `json:"cloudformationStackStatusReason,omitempty"`
	// ARN of the main CloudFormation stack.
	CloudformationStackArn *string `json:"cloudformationStackArn,omitempty"`
	// Timestamp representing the image creation time.
	CreationTime *time.Time `json:"creationTime,omitempty"`
	// Timestamp representing the CloudFormation stack creation time.
	CloudformationStackCreationTime *time.Time `json:"cloudformationStackCreationTime,omitempty"`
	// Tags for the CloudFormation stack.
	CloudformationStackTags []Tag `json:"cloudformationStackTags,omitempty"`
	ImageConfiguration ImageConfigurationStructure `json:"imageConfiguration"`
	ImagebuilderImageStatus *ImageBuilderImageStatus `json:"imagebuilderImageStatus,omitempty"`
	// Reason for the ImageBuilder Image status.
	ImagebuilderImageStatusReason *string `json:"imagebuilderImageStatusReason,omitempty"`
	Ec2AmiInfo *Ec2AmiInfo `json:"ec2AmiInfo,omitempty"`
}

type _DescribeImageResponseContent DescribeImageResponseContent

// NewDescribeImageResponseContent instantiates a new DescribeImageResponseContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDescribeImageResponseContent(imageId string, region string, version string, imageBuildStatus ImageBuildStatus, imageConfiguration ImageConfigurationStructure) *DescribeImageResponseContent {
	this := DescribeImageResponseContent{}
	this.ImageId = imageId
	this.Region = region
	this.Version = version
	this.ImageBuildStatus = imageBuildStatus
	this.ImageConfiguration = imageConfiguration
	return &this
}

// NewDescribeImageResponseContentWithDefaults instantiates a new DescribeImageResponseContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDescribeImageResponseContentWithDefaults() *DescribeImageResponseContent {
	this := DescribeImageResponseContent{}
	return &this
}

// GetImageId returns the ImageId field value
func (o *DescribeImageResponseContent) GetImageId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetImageIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageId, true
}

// SetImageId sets field value
func (o *DescribeImageResponseContent) SetImageId(v string) {
	o.ImageId = v
}

// GetRegion returns the Region field value
func (o *DescribeImageResponseContent) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *DescribeImageResponseContent) SetRegion(v string) {
	o.Region = v
}

// GetVersion returns the Version field value
func (o *DescribeImageResponseContent) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *DescribeImageResponseContent) SetVersion(v string) {
	o.Version = v
}

// GetImageBuildStatus returns the ImageBuildStatus field value
func (o *DescribeImageResponseContent) GetImageBuildStatus() ImageBuildStatus {
	if o == nil {
		var ret ImageBuildStatus
		return ret
	}

	return o.ImageBuildStatus
}

// GetImageBuildStatusOk returns a tuple with the ImageBuildStatus field value
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetImageBuildStatusOk() (*ImageBuildStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageBuildStatus, true
}

// SetImageBuildStatus sets field value
func (o *DescribeImageResponseContent) SetImageBuildStatus(v ImageBuildStatus) {
	o.ImageBuildStatus = v
}

// GetImageBuildLogsArn returns the ImageBuildLogsArn field value if set, zero value otherwise.
func (o *DescribeImageResponseContent) GetImageBuildLogsArn() string {
	if o == nil || IsNil(o.ImageBuildLogsArn) {
		var ret string
		return ret
	}
	return *o.ImageBuildLogsArn
}

// GetImageBuildLogsArnOk returns a tuple with the ImageBuildLogsArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetImageBuildLogsArnOk() (*string, bool) {
	if o == nil || IsNil(o.ImageBuildLogsArn) {
		return nil, false
	}
	return o.ImageBuildLogsArn, true
}

// HasImageBuildLogsArn returns a boolean if a field has been set.
func (o *DescribeImageResponseContent) HasImageBuildLogsArn() bool {
	if o != nil && !IsNil(o.ImageBuildLogsArn) {
		return true
	}

	return false
}

// SetImageBuildLogsArn gets a reference to the given string and assigns it to the ImageBuildLogsArn field.
func (o *DescribeImageResponseContent) SetImageBuildLogsArn(v string) {
	o.ImageBuildLogsArn = &v
}

// GetCloudformationStackStatus returns the CloudformationStackStatus field value if set, zero value otherwise.
func (o *DescribeImageResponseContent) GetCloudformationStackStatus() CloudFormationStackStatus {
	if o == nil || IsNil(o.CloudformationStackStatus) {
		var ret CloudFormationStackStatus
		return ret
	}
	return *o.CloudformationStackStatus
}

// GetCloudformationStackStatusOk returns a tuple with the CloudformationStackStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetCloudformationStackStatusOk() (*CloudFormationStackStatus, bool) {
	if o == nil || IsNil(o.CloudformationStackStatus) {
		return nil, false
	}
	return o.CloudformationStackStatus, true
}

// HasCloudformationStackStatus returns a boolean if a field has been set.
func (o *DescribeImageResponseContent) HasCloudformationStackStatus() bool {
	if o != nil && !IsNil(o.CloudformationStackStatus) {
		return true
	}

	return false
}

// SetCloudformationStackStatus gets a reference to the given CloudFormationStackStatus and assigns it to the CloudformationStackStatus field.
func (o *DescribeImageResponseContent) SetCloudformationStackStatus(v CloudFormationStackStatus) {
	o.CloudformationStackStatus = &v
}

// GetCloudformationStackStatusReason returns the CloudformationStackStatusReason field value if set, zero value otherwise.
func (o *DescribeImageResponseContent) GetCloudformationStackStatusReason() string {
	if o == nil || IsNil(o.CloudformationStackStatusReason) {
		var ret string
		return ret
	}
	return *o.CloudformationStackStatusReason
}

// GetCloudformationStackStatusReasonOk returns a tuple with the CloudformationStackStatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetCloudformationStackStatusReasonOk() (*string, bool) {
	if o == nil || IsNil(o.CloudformationStackStatusReason) {
		return nil, false
	}
	return o.CloudformationStackStatusReason, true
}

// HasCloudformationStackStatusReason returns a boolean if a field has been set.
func (o *DescribeImageResponseContent) HasCloudformationStackStatusReason() bool {
	if o != nil && !IsNil(o.CloudformationStackStatusReason) {
		return true
	}

	return false
}

// SetCloudformationStackStatusReason gets a reference to the given string and assigns it to the CloudformationStackStatusReason field.
func (o *DescribeImageResponseContent) SetCloudformationStackStatusReason(v string) {
	o.CloudformationStackStatusReason = &v
}

// GetCloudformationStackArn returns the CloudformationStackArn field value if set, zero value otherwise.
func (o *DescribeImageResponseContent) GetCloudformationStackArn() string {
	if o == nil || IsNil(o.CloudformationStackArn) {
		var ret string
		return ret
	}
	return *o.CloudformationStackArn
}

// GetCloudformationStackArnOk returns a tuple with the CloudformationStackArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetCloudformationStackArnOk() (*string, bool) {
	if o == nil || IsNil(o.CloudformationStackArn) {
		return nil, false
	}
	return o.CloudformationStackArn, true
}

// HasCloudformationStackArn returns a boolean if a field has been set.
func (o *DescribeImageResponseContent) HasCloudformationStackArn() bool {
	if o != nil && !IsNil(o.CloudformationStackArn) {
		return true
	}

	return false
}

// SetCloudformationStackArn gets a reference to the given string and assigns it to the CloudformationStackArn field.
func (o *DescribeImageResponseContent) SetCloudformationStackArn(v string) {
	o.CloudformationStackArn = &v
}

// GetCreationTime returns the CreationTime field value if set, zero value otherwise.
func (o *DescribeImageResponseContent) GetCreationTime() time.Time {
	if o == nil || IsNil(o.CreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreationTime) {
		return nil, false
	}
	return o.CreationTime, true
}

// HasCreationTime returns a boolean if a field has been set.
func (o *DescribeImageResponseContent) HasCreationTime() bool {
	if o != nil && !IsNil(o.CreationTime) {
		return true
	}

	return false
}

// SetCreationTime gets a reference to the given time.Time and assigns it to the CreationTime field.
func (o *DescribeImageResponseContent) SetCreationTime(v time.Time) {
	o.CreationTime = &v
}

// GetCloudformationStackCreationTime returns the CloudformationStackCreationTime field value if set, zero value otherwise.
func (o *DescribeImageResponseContent) GetCloudformationStackCreationTime() time.Time {
	if o == nil || IsNil(o.CloudformationStackCreationTime) {
		var ret time.Time
		return ret
	}
	return *o.CloudformationStackCreationTime
}

// GetCloudformationStackCreationTimeOk returns a tuple with the CloudformationStackCreationTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetCloudformationStackCreationTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CloudformationStackCreationTime) {
		return nil, false
	}
	return o.CloudformationStackCreationTime, true
}

// HasCloudformationStackCreationTime returns a boolean if a field has been set.
func (o *DescribeImageResponseContent) HasCloudformationStackCreationTime() bool {
	if o != nil && !IsNil(o.CloudformationStackCreationTime) {
		return true
	}

	return false
}

// SetCloudformationStackCreationTime gets a reference to the given time.Time and assigns it to the CloudformationStackCreationTime field.
func (o *DescribeImageResponseContent) SetCloudformationStackCreationTime(v time.Time) {
	o.CloudformationStackCreationTime = &v
}

// GetCloudformationStackTags returns the CloudformationStackTags field value if set, zero value otherwise.
func (o *DescribeImageResponseContent) GetCloudformationStackTags() []Tag {
	if o == nil || IsNil(o.CloudformationStackTags) {
		var ret []Tag
		return ret
	}
	return o.CloudformationStackTags
}

// GetCloudformationStackTagsOk returns a tuple with the CloudformationStackTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetCloudformationStackTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.CloudformationStackTags) {
		return nil, false
	}
	return o.CloudformationStackTags, true
}

// HasCloudformationStackTags returns a boolean if a field has been set.
func (o *DescribeImageResponseContent) HasCloudformationStackTags() bool {
	if o != nil && !IsNil(o.CloudformationStackTags) {
		return true
	}

	return false
}

// SetCloudformationStackTags gets a reference to the given []Tag and assigns it to the CloudformationStackTags field.
func (o *DescribeImageResponseContent) SetCloudformationStackTags(v []Tag) {
	o.CloudformationStackTags = v
}

// GetImageConfiguration returns the ImageConfiguration field value
func (o *DescribeImageResponseContent) GetImageConfiguration() ImageConfigurationStructure {
	if o == nil {
		var ret ImageConfigurationStructure
		return ret
	}

	return o.ImageConfiguration
}

// GetImageConfigurationOk returns a tuple with the ImageConfiguration field value
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetImageConfigurationOk() (*ImageConfigurationStructure, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageConfiguration, true
}

// SetImageConfiguration sets field value
func (o *DescribeImageResponseContent) SetImageConfiguration(v ImageConfigurationStructure) {
	o.ImageConfiguration = v
}

// GetImagebuilderImageStatus returns the ImagebuilderImageStatus field value if set, zero value otherwise.
func (o *DescribeImageResponseContent) GetImagebuilderImageStatus() ImageBuilderImageStatus {
	if o == nil || IsNil(o.ImagebuilderImageStatus) {
		var ret ImageBuilderImageStatus
		return ret
	}
	return *o.ImagebuilderImageStatus
}

// GetImagebuilderImageStatusOk returns a tuple with the ImagebuilderImageStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetImagebuilderImageStatusOk() (*ImageBuilderImageStatus, bool) {
	if o == nil || IsNil(o.ImagebuilderImageStatus) {
		return nil, false
	}
	return o.ImagebuilderImageStatus, true
}

// HasImagebuilderImageStatus returns a boolean if a field has been set.
func (o *DescribeImageResponseContent) HasImagebuilderImageStatus() bool {
	if o != nil && !IsNil(o.ImagebuilderImageStatus) {
		return true
	}

	return false
}

// SetImagebuilderImageStatus gets a reference to the given ImageBuilderImageStatus and assigns it to the ImagebuilderImageStatus field.
func (o *DescribeImageResponseContent) SetImagebuilderImageStatus(v ImageBuilderImageStatus) {
	o.ImagebuilderImageStatus = &v
}

// GetImagebuilderImageStatusReason returns the ImagebuilderImageStatusReason field value if set, zero value otherwise.
func (o *DescribeImageResponseContent) GetImagebuilderImageStatusReason() string {
	if o == nil || IsNil(o.ImagebuilderImageStatusReason) {
		var ret string
		return ret
	}
	return *o.ImagebuilderImageStatusReason
}

// GetImagebuilderImageStatusReasonOk returns a tuple with the ImagebuilderImageStatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetImagebuilderImageStatusReasonOk() (*string, bool) {
	if o == nil || IsNil(o.ImagebuilderImageStatusReason) {
		return nil, false
	}
	return o.ImagebuilderImageStatusReason, true
}

// HasImagebuilderImageStatusReason returns a boolean if a field has been set.
func (o *DescribeImageResponseContent) HasImagebuilderImageStatusReason() bool {
	if o != nil && !IsNil(o.ImagebuilderImageStatusReason) {
		return true
	}

	return false
}

// SetImagebuilderImageStatusReason gets a reference to the given string and assigns it to the ImagebuilderImageStatusReason field.
func (o *DescribeImageResponseContent) SetImagebuilderImageStatusReason(v string) {
	o.ImagebuilderImageStatusReason = &v
}

// GetEc2AmiInfo returns the Ec2AmiInfo field value if set, zero value otherwise.
func (o *DescribeImageResponseContent) GetEc2AmiInfo() Ec2AmiInfo {
	if o == nil || IsNil(o.Ec2AmiInfo) {
		var ret Ec2AmiInfo
		return ret
	}
	return *o.Ec2AmiInfo
}

// GetEc2AmiInfoOk returns a tuple with the Ec2AmiInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DescribeImageResponseContent) GetEc2AmiInfoOk() (*Ec2AmiInfo, bool) {
	if o == nil || IsNil(o.Ec2AmiInfo) {
		return nil, false
	}
	return o.Ec2AmiInfo, true
}

// HasEc2AmiInfo returns a boolean if a field has been set.
func (o *DescribeImageResponseContent) HasEc2AmiInfo() bool {
	if o != nil && !IsNil(o.Ec2AmiInfo) {
		return true
	}

	return false
}

// SetEc2AmiInfo gets a reference to the given Ec2AmiInfo and assigns it to the Ec2AmiInfo field.
func (o *DescribeImageResponseContent) SetEc2AmiInfo(v Ec2AmiInfo) {
	o.Ec2AmiInfo = &v
}

func (o DescribeImageResponseContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DescribeImageResponseContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["imageId"] = o.ImageId
	toSerialize["region"] = o.Region
	toSerialize["version"] = o.Version
	toSerialize["imageBuildStatus"] = o.ImageBuildStatus
	if !IsNil(o.ImageBuildLogsArn) {
		toSerialize["imageBuildLogsArn"] = o.ImageBuildLogsArn
	}
	if !IsNil(o.CloudformationStackStatus) {
		toSerialize["cloudformationStackStatus"] = o.CloudformationStackStatus
	}
	if !IsNil(o.CloudformationStackStatusReason) {
		toSerialize["cloudformationStackStatusReason"] = o.CloudformationStackStatusReason
	}
	if !IsNil(o.CloudformationStackArn) {
		toSerialize["cloudformationStackArn"] = o.CloudformationStackArn
	}
	if !IsNil(o.CreationTime) {
		toSerialize["creationTime"] = o.CreationTime
	}
	if !IsNil(o.CloudformationStackCreationTime) {
		toSerialize["cloudformationStackCreationTime"] = o.CloudformationStackCreationTime
	}
	if !IsNil(o.CloudformationStackTags) {
		toSerialize["cloudformationStackTags"] = o.CloudformationStackTags
	}
	toSerialize["imageConfiguration"] = o.ImageConfiguration
	if !IsNil(o.ImagebuilderImageStatus) {
		toSerialize["imagebuilderImageStatus"] = o.ImagebuilderImageStatus
	}
	if !IsNil(o.ImagebuilderImageStatusReason) {
		toSerialize["imagebuilderImageStatusReason"] = o.ImagebuilderImageStatusReason
	}
	if !IsNil(o.Ec2AmiInfo) {
		toSerialize["ec2AmiInfo"] = o.Ec2AmiInfo
	}
	return toSerialize, nil
}

func (o *DescribeImageResponseContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"imageId",
		"region",
		"version",
		"imageBuildStatus",
		"imageConfiguration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDescribeImageResponseContent := _DescribeImageResponseContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDescribeImageResponseContent)

	if err != nil {
		return err
	}

	*o = DescribeImageResponseContent(varDescribeImageResponseContent)

	return err
}

type NullableDescribeImageResponseContent struct {
	value *DescribeImageResponseContent
	isSet bool
}

func (v NullableDescribeImageResponseContent) Get() *DescribeImageResponseContent {
	return v.value
}

func (v *NullableDescribeImageResponseContent) Set(val *DescribeImageResponseContent) {
	v.value = val
	v.isSet = true
}

func (v NullableDescribeImageResponseContent) IsSet() bool {
	return v.isSet
}

func (v *NullableDescribeImageResponseContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDescribeImageResponseContent(val *DescribeImageResponseContent) *NullableDescribeImageResponseContent {
	return &NullableDescribeImageResponseContent{value: val, isSet: true}
}

func (v NullableDescribeImageResponseContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDescribeImageResponseContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
