/*
ParallelCluster

ParallelCluster API

API version: 3.10.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ImageStatusFilteringOption the model 'ImageStatusFilteringOption'
type ImageStatusFilteringOption string

// List of ImageStatusFilteringOption
const (
	IMAGESTATUSFILTERINGOPTION_AVAILABLE ImageStatusFilteringOption = "AVAILABLE"
	IMAGESTATUSFILTERINGOPTION_PENDING ImageStatusFilteringOption = "PENDING"
	IMAGESTATUSFILTERINGOPTION_FAILED ImageStatusFilteringOption = "FAILED"
)

// All allowed values of ImageStatusFilteringOption enum
var AllowedImageStatusFilteringOptionEnumValues = []ImageStatusFilteringOption{
	"AVAILABLE",
	"PENDING",
	"FAILED",
}

func (v *ImageStatusFilteringOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageStatusFilteringOption(value)
	for _, existing := range AllowedImageStatusFilteringOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageStatusFilteringOption", value)
}

// NewImageStatusFilteringOptionFromValue returns a pointer to a valid ImageStatusFilteringOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageStatusFilteringOptionFromValue(v string) (*ImageStatusFilteringOption, error) {
	ev := ImageStatusFilteringOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageStatusFilteringOption: valid values are %v", v, AllowedImageStatusFilteringOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageStatusFilteringOption) IsValid() bool {
	for _, existing := range AllowedImageStatusFilteringOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageStatusFilteringOption value
func (v ImageStatusFilteringOption) Ptr() *ImageStatusFilteringOption {
	return &v
}

type NullableImageStatusFilteringOption struct {
	value *ImageStatusFilteringOption
	isSet bool
}

func (v NullableImageStatusFilteringOption) Get() *ImageStatusFilteringOption {
	return v.value
}

func (v *NullableImageStatusFilteringOption) Set(val *ImageStatusFilteringOption) {
	v.value = val
	v.isSet = true
}

func (v NullableImageStatusFilteringOption) IsSet() bool {
	return v.isSet
}

func (v *NullableImageStatusFilteringOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageStatusFilteringOption(val *ImageStatusFilteringOption) *NullableImageStatusFilteringOption {
	return &NullableImageStatusFilteringOption{value: val, isSet: true}
}

func (v NullableImageStatusFilteringOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageStatusFilteringOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
