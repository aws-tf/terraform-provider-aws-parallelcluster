/*
ParallelCluster

ParallelCluster API

API version: 3.10.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LoginNodesState the model 'LoginNodesState'
type LoginNodesState string

// List of LoginNodesState
const (
	LOGINNODESSTATE_PENDING LoginNodesState = "pending"
	LOGINNODESSTATE_ACTIVE LoginNodesState = "active"
	LOGINNODESSTATE_FAILED LoginNodesState = "failed"
)

// All allowed values of LoginNodesState enum
var AllowedLoginNodesStateEnumValues = []LoginNodesState{
	"pending",
	"active",
	"failed",
}

func (v *LoginNodesState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoginNodesState(value)
	for _, existing := range AllowedLoginNodesStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoginNodesState", value)
}

// NewLoginNodesStateFromValue returns a pointer to a valid LoginNodesState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoginNodesStateFromValue(v string) (*LoginNodesState, error) {
	ev := LoginNodesState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoginNodesState: valid values are %v", v, AllowedLoginNodesStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoginNodesState) IsValid() bool {
	for _, existing := range AllowedLoginNodesStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoginNodesState value
func (v LoginNodesState) Ptr() *LoginNodesState {
	return &v
}

type NullableLoginNodesState struct {
	value *LoginNodesState
	isSet bool
}

func (v NullableLoginNodesState) Get() *LoginNodesState {
	return v.value
}

func (v *NullableLoginNodesState) Set(val *LoginNodesState) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginNodesState) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginNodesState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginNodesState(val *LoginNodesState) *NullableLoginNodesState {
	return &NullableLoginNodesState{value: val, isSet: true}
}

func (v NullableLoginNodesState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginNodesState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
