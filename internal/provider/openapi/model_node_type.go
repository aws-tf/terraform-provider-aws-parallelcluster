/*
ParallelCluster

ParallelCluster API

API version: 3.11.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NodeType the model 'NodeType'
type NodeType string

// List of NodeType
const (
	NODETYPE_HEAD_NODE NodeType = "HeadNode"
	NODETYPE_COMPUTE_NODE NodeType = "ComputeNode"
	NODETYPE_LOGIN_NODE NodeType = "LoginNode"
)

// All allowed values of NodeType enum
var AllowedNodeTypeEnumValues = []NodeType{
	"HeadNode",
	"ComputeNode",
	"LoginNode",
}

func (v *NodeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NodeType(value)
	for _, existing := range AllowedNodeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NodeType", value)
}

// NewNodeTypeFromValue returns a pointer to a valid NodeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNodeTypeFromValue(v string) (*NodeType, error) {
	ev := NodeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NodeType: valid values are %v", v, AllowedNodeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NodeType) IsValid() bool {
	for _, existing := range AllowedNodeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NodeType value
func (v NodeType) Ptr() *NodeType {
	return &v
}

type NullableNodeType struct {
	value *NodeType
	isSet bool
}

func (v NullableNodeType) Get() *NodeType {
	return v.value
}

func (v *NullableNodeType) Set(val *NodeType) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeType) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeType(val *NodeType) *NullableNodeType {
	return &NullableNodeType{value: val, isSet: true}
}

func (v NullableNodeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

